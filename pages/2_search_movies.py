import streamlit as st
import pandas as pd
import numpy as np
from sentence_transformers import SentenceTransformer
import faiss
from collections import Counter

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏ –∏ –¥–∞–Ω–Ω—ã—Ö ===
MODEL_NAME = "sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2"

@st.cache_data
def load_data():
    df = pd.read_csv("movies_list.csv")
    df['genre_list1'] = df['genre'].fillna('').apply(lambda x: [g.strip() for g in x.split(',') if g.strip()])
    df['director_list'] = df['director'].fillna('').apply(lambda x: [d.strip() for d in x.split(',') if d.strip() and d.strip() != '...'])
    return df

@st.cache_resource
def load_model_and_index():
    model = SentenceTransformer(MODEL_NAME)
    vectors = np.load("movie_vectors.npy")
    vectors = vectors / np.linalg.norm(vectors, axis=1, keepdims=True)
    index = faiss.IndexFlatIP(vectors.shape[1])
    index.add(vectors)
    return model, index, vectors

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Streamlit —Å—Ç—Ä–∞–Ω–∏—Ü—ã ===
st.set_page_config(page_title="üé¨ –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤", layout="wide")
st.markdown("<h1 style='color:#e50914;'>üé¨ –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —Ñ–∏–ª—å–º–æ–≤ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é</h1>", unsafe_allow_html=True)

# === –°—Ç–∏–ª–∏ ===
st.markdown("""
<style>
    .block-container { padding-top: 2rem; }
    h3 { color: #f5c518; font-weight: 700; }
    .movie-card {
        background-color: #1e1e1e;
        padding: 1rem;
        border-radius: 12px;
        margin-bottom: 1.5rem;
        color: white;
        box-shadow: 0 4px 12px rgba(0,0,0,0.2);
    }
    .stImage > img {
        border-radius: 10px;
    }
</style>
""", unsafe_allow_html=True)

# === –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –¥–∞–Ω–Ω—ã—Ö ===
df = load_data()
model, full_index, vectors = load_model_and_index()

# === –ë–æ–∫–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ===
st.markdown("""
**üß† –ú–æ–¥–µ–ª—å:** `paraphrase-multilingual-MiniLM-L12-v2`  
**üìê –ú–µ—Ç—Ä–∏–∫–∞:** –ö–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ  
**üî¢ –†–∞–∑–º–µ—Ä —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤:** 384
""")

# === –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è ===
st.subheader("üéõ –§–∏–ª—å—Ç—Ä—ã")
col1, col2 = st.columns(2)

with col1:
    years = st.slider("üìÖ –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞", int(df['year'].min()), int(df['year'].max()), (1990, 2023))
    time_min = st.number_input("‚è± –ú–∏–Ω. –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω)", min_value=0, max_value=500, value=0)
    genre_options = sorted(set(g for genres in df['genre_list1'] for g in genres))
    genres = st.multiselect("üé≠ –ñ–∞–Ω—Ä—ã", genre_options)

with col2:
    time_max = st.number_input("‚è± –ú–∞–∫—Å. –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω)", min_value=0, max_value=500, value=300)
    all_directors = [d for sublist in df['director_list'] for d in sublist]
    director_counts = Counter(all_directors)
    director_options = [d for d, _ in director_counts.most_common()]
    directors = st.multiselect("üé¨ –†–µ–∂–∏—Å—Å—ë—Ä—ã", director_options)
    top_k = st.slider("üìΩ –ö–æ–ª-–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π", min_value=1, max_value=20, value=10)

# === –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è DataFrame ===
filtered_df = df[
    (df['year'] >= years[0]) & (df['year'] <= years[1]) &
    (df['time_minutes'] >= time_min) & (df['time_minutes'] <= time_max)
]

if genres:
    filtered_df = filtered_df[filtered_df['genre_list1'].apply(lambda lst: any(g in lst for g in genres))]

if directors:
    filtered_df = filtered_df[filtered_df['director_list'].apply(lambda lst: any(d in lst for d in directors))]

st.info(f"üéû –ù–∞–π–¥–µ–Ω–æ —Ñ–∏–ª—å–º–æ–≤: **{len(filtered_df)}**")

if len(filtered_df) == 0:
    st.warning("‚ùå –ù–µ—Ç —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.")
    st.stop()

# === –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ –∏–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ ===
filtered_indices = filtered_df.index.tolist()
try:
    filtered_vectors = vectors[filtered_indices]
except IndexError as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {e}")
    st.stop()

filtered_index = faiss.IndexFlatIP(filtered_vectors.shape[1])
filtered_index.add(filtered_vectors)

# === –ü–æ–∏—Å–∫ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é ===
st.subheader("üîé –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞")
query = st.text_input("üí¨ –ù–∞–ø—Ä–∏–º–µ—Ä: —Ñ–∏–ª—å–º –ø—Ä–æ –ª—é–±–æ–≤—å, –≥—Ä—É—Å—Ç–Ω—ã–π", key="query_input")

if st.button("üîç –ù–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ —Ñ–∏–ª—å–º—ã"):
    if not query.strip():
        st.warning("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ.")
    else:
        with st.spinner("üîç –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫..."):
            query_vec = model.encode([query]).astype('float32')
            query_vec = query_vec / np.linalg.norm(query_vec, axis=1, keepdims=True)
            D, I = filtered_index.search(query_vec, top_k)
            results = filtered_df.iloc[I[0]]

            st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} –ø–æ—Ö–æ–∂–∏—Ö —Ñ–∏–ª—å–º–æ–≤:")
            for i in range(0, len(results), 2):
                cols = st.columns(2)
                for j in range(2):
                    if i + j < len(results):
                        row = results.iloc[i + j]
                        with cols[j]:
                            st.markdown('<div class="movie-card">', unsafe_allow_html=True)
                            st.markdown(f"### üé¨ {row['movie_title']}")
                            if pd.notna(row.get('image_url')):
                                st.image(row['image_url'], width=250)
                            st.markdown(f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {row.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}")
                            st.markdown(f"üé≠ **–ñ–∞–Ω—Ä—ã:** {', '.join(row.get('genre_list1', [])) or '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}")
                            st.markdown(f"üé¨ **–†–µ–∂–∏—Å—Å—ë—Ä:** {', '.join(row.get('director_list', [])) or '–ù–µ —É–∫–∞–∑–∞–Ω'}")
                            st.markdown(f"üìÖ **–ì–æ–¥:** {row.get('year', '?')}")
                            st.markdown(f"‚è± **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {row.get('time_minutes', '?')} –º–∏–Ω")
                            st.markdown('</div>', unsafe_allow_html=True)
