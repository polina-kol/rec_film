import streamlit as st
import pandas as pd
import numpy as np
from sentence_transformers import SentenceTransformer
import faiss
from collections import Counter

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏ ===
MODEL_NAME = "sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2"

# === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
@st.cache_data
def load_data():
    df = pd.read_csv("movies_list.csv")
    df['genre_list1'] = df['genre'].fillna('').apply(lambda x: [g.strip() for g in x.split(',') if g.strip()])
    return df

# === –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –∏–Ω–¥–µ–∫—Å–∞ ===
@st.cache_resource
def load_model_and_index():
    model = SentenceTransformer(MODEL_NAME)
    vectors = np.load("movie_vectors.npy")
    vectors = vectors / np.linalg.norm(vectors, axis=1, keepdims=True)
    index = faiss.IndexFlatIP(vectors.shape[1])
    index.add(vectors)
    return model, index, vectors

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ===
st.set_page_config(page_title="–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é", layout="wide")

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏ —Å –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–º–∏ —ç–º–æ–¥–∑–∏
st.markdown("""
<style>
    * {
        font-family: "Helvetica Neue", Helvetica, Arial, sans-serif !important;
    }
    
    /* –°—Ç–∏–ª—å–Ω—ã–µ –º–æ–Ω–æ—Ö—Ä–æ–º–Ω—ã–µ —ç–º–æ–¥–∑–∏ */
    .emoji {
        font-size: 1.2em;
        filter: grayscale(30%) contrast(120%);
    }
    
    .movie-card {
        border: 1px solid #e0e0e0;
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 20px;
        background-color: white;
        box-shadow: 0 4px 12px rgba(0,0,0,0.05);
    }
    
    .movie-title {
        font-size: 1.5rem;
        font-weight: bold;
        margin-bottom: 12px;
        color: #000000;
    }
    
    .movie-meta {
        color: #333333;
        margin-bottom: 10px;
        font-size: 1.1rem;
    }
    
    .movie-description {
        color: #000000 !important;
        font-size: 1.1rem;
        line-height: 1.5;
    }
    
    .stButton button {
        background-color: #e50914;
        color: white;
        border-radius: 25px;
        padding: 12px 24px;
        font-size: 1.1rem;
        border: none;
        transition: all 0.3s ease;
    }
    
    .stButton button:hover {
        background-color: #b00710;
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(229, 9, 20, 0.3);
    }
    
    .stTextInput input {
        font-size: 1.1rem;
        padding: 12px;
    }
</style>
""", unsafe_allow_html=True)

# === –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Å—Ç–∏–ª—å–Ω—ã–º–∏ —ç–º–æ–¥–∑–∏ ===
st.markdown("""
<h1 style='font-size: 2.5rem; margin-bottom: 1.5rem;'>
    <span class='emoji'>üéûÔ∏è</span> –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —Ñ–∏–ª—å–º–æ–≤ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
</h1>
""", unsafe_allow_html=True)

df = load_data()
model, full_index, vectors = load_model_and_index()

df['director_list'] = df['director'].fillna('').apply(
    lambda x: [d.strip() for d in x.split(',') if d.strip() and d.strip() != '...']
)

# === –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ ===
st.markdown("""
<div style='font-size: 1.1rem; line-height: 1.6;'>
    <span class='emoji'>üî¢</span> <strong>–ú–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤:</strong> <code>sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2</code><br>
    <span class='emoji'>üìê</span> <strong>–ú–µ—Ç—Ä–∏–∫–∞:</strong> –ö–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ (FAISS <code>IndexFlatIP</code>)<br>
    <span class='emoji'>üìè</span> <strong>–†–∞–∑–º–µ—Ä –≤–µ–∫—Ç–æ—Ä–æ–≤:</strong> 384
</div>
""", unsafe_allow_html=True)

# === –§–∏–ª—å—Ç—Ä—ã ===
st.markdown("""
<h2 style='font-size: 1.8rem; margin-top: 2rem; margin-bottom: 1.5rem;'>
    <span class='emoji'>‚öôÔ∏è</span> –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
</h2>
""", unsafe_allow_html=True)

col1, col2 = st.columns(2)

with col1:
    years = st.slider("**<span class='emoji'>üìÖ</span> –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞**", 
                     int(df['year'].min()), int(df['year'].max()), (1990, 2023),
                     help="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –≥–æ–¥–æ–≤ –≤—ã–ø—É—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤", key="years_slider")
    
    time_min = st.number_input("**<span class='emoji'>‚è±Ô∏è</span> –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω)**", 
                             min_value=0, max_value=500, value=0, step=5,
                             help="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∏–ª—å–º–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö")
    
    genre_options = sorted(set(g for genres in df['genre_list1'] for g in genres))
    genres = st.multiselect("**<span class='emoji'>üé≠</span> –ñ–∞–Ω—Ä—ã**", 
                           genre_options,
                           help="–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∂–∞–Ω—Ä–æ–≤")

with col2:
    time_max = st.number_input("**<span class='emoji'>‚è±Ô∏è</span> –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω)**", 
                             min_value=0, max_value=500, value=300, step=5,
                             help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∏–ª—å–º–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö")
    
    all_directors = [d for sublist in df['director_list'] for d in sublist]
    director_counts = Counter(all_directors)
    director_options = [d for d, _ in director_counts.most_common()]
    directors = st.multiselect("**<span class='emoji'>üé¨</span> –†–µ–∂–∏—Å—Å—ë—Ä—ã**", 
                              director_options,
                              help="–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–µ–∂–∏—Å—Å—ë—Ä–æ–≤")
    
    top_k = st.slider("**<span class='emoji'>üé•</span> –ö–æ–ª-–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π**", 
                     min_value=1, max_value=20, value=10, step=1,
                     help="–°–∫–æ–ª—å–∫–æ –ø–æ—Ö–æ–∂–∏—Ö —Ñ–∏–ª—å–º–æ–≤ –ø–æ–∫–∞–∑–∞—Ç—å")

# === –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è DataFrame ===
filtered_df = df[
    (df['year'] >= years[0]) & (df['year'] <= years[1]) &
    (df['time_minutes'] >= time_min) & (df['time_minutes'] <= time_max)
]

if genres:
    filtered_df = filtered_df[filtered_df['genre_list1'].apply(lambda lst: any(g in lst for g in genres))]

if directors:
    filtered_df = filtered_df[filtered_df['director_list'].apply(lambda lst: any(d in lst for d in directors))]

st.markdown(f"""
<div style='font-size: 1.1rem; padding: 12px 16px; background-color: #f8f9fa; border-radius: 8px; margin: 1rem 0;'>
    <span class='emoji'>üéûÔ∏è</span> <strong>–ù–∞–π–¥–µ–Ω–æ —Ñ–∏–ª—å–º–æ–≤ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:</strong> {len(filtered_df)}
</div>
""", unsafe_allow_html=True)

if len(filtered_df) == 0:
    st.markdown("""
    <div style='font-size: 1.1rem; padding: 12px 16px; background-color: #fff3cd; border-radius: 8px; color: #856404;'>
        <span class='emoji'>‚ö†Ô∏è</span> –ù–µ—Ç —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.
    </div>
    """, unsafe_allow_html=True)
    st.stop()

# === –í–µ–∫—Ç–æ—Ä–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ ===
filtered_indices = filtered_df.index.tolist()
try:
    filtered_vectors = vectors[filtered_indices]
except IndexError as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {e}")
    st.stop()

filtered_index = faiss.IndexFlatIP(filtered_vectors.shape[1])
filtered_index.add(filtered_vectors)

# === –ü–æ–∏—Å–∫ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é ===
st.markdown("""
<h2 style='font-size: 1.8rem; margin-top: 2rem; margin-bottom: 1.5rem;'>
    <span class='emoji'>üîç</span> –ü–æ–∏—Å–∫ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
</h2>
""", unsafe_allow_html=True)

query = st.text_input("**<span class='emoji'>üí¨</span> –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞**", 
                     placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: —Ñ–∏–ª—å–º –ø—Ä–æ –ª—é–±–æ–≤—å, –≥—Ä—É—Å—Ç–Ω—ã–π", 
                     key="query_input",
                     help="–û–ø–∏—à–∏—Ç–µ —Ñ–∏–ª—å–º, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏")

if st.button("**<span class='emoji'>üîé</span> –ù–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ —Ñ–∏–ª—å–º—ã**"):
    if not query.strip():
        st.markdown("""
        <div style='font-size: 1.1rem; padding: 12px 16px; background-color: #fff3cd; border-radius: 8px; color: #856404;'>
            <span class='emoji'>‚ö†Ô∏è</span> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞.
        </div>
        """, unsafe_allow_html=True)
    else:
        with st.spinner("**<span class='emoji'>üîç</span> –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ —Ñ–∏–ª—å–º—ã...**"):
            query_vec = model.encode([query]).astype('float32')
            query_vec = query_vec / np.linalg.norm(query_vec, axis=1, keepdims=True)
            D, I = filtered_index.search(query_vec, top_k)
            results = filtered_df.iloc[I[0]]

            st.markdown("""
            <div style='font-size: 1.3rem; padding: 12px 16px; background-color: #d4edda; border-radius: 8px; color: #155724; margin: 1.5rem 0;'>
                <span class='emoji'>‚úÖ</span> –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ö–æ–∂–∏—Ö —Ñ–∏–ª—å–º–æ–≤: {len(results)}
            </div>
            """.format(len(results)), unsafe_allow_html=True)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–µ—Ç–∫–µ 2 –∫–æ–ª–æ–Ω–∫–∏
            cols = st.columns(2)
            for i, (_, row) in enumerate(results.iterrows()):
                with cols[i % 2]:
                    st.markdown(f"""
                    <div class="movie-card">
                        <div class="movie-title"><span class='emoji'>üé¨</span> {row['movie_title']}</div>
                        {"<img src='"+row['image_url']+"' width='100%' style='border-radius: 8px; margin-bottom: 12px;'>" if 'image_url' in row and pd.notna(row['image_url']) else ''}
                        
                        <div class="movie-meta">
                            <span class='emoji'>üìÖ</span> <strong>–ì–æ–¥:</strong> {row.get('year', '?')} &nbsp;|&nbsp;
                            <span class='emoji'>‚è±Ô∏è</span> <strong>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> {row.get('time_minutes', '?')} –º–∏–Ω
                        </div>
                        
                        <div class="movie-meta">
                            <span class='emoji'>üé≠</span> <strong>–ñ–∞–Ω—Ä—ã:</strong> {', '.join(row.get('genre_list1', [])) or '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}
                        </div>
                        
                        <div class="movie-meta">
                            <span class='emoji'>üé¨</span> <strong>–†–µ–∂–∏—Å—Å—ë—Ä:</strong> {', '.join(row.get('director_list', [])) or '–ù–µ —É–∫–∞–∑–∞–Ω'}
                        </div>
                        
                        <div class="movie-description">
                            <span class='emoji'>üìù</span> <strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {row.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}
                        </div>
                    </div>
                    """, unsafe_allow_html=True)