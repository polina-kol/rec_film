import streamlit as st
import pandas as pd
import numpy as np
from sentence_transformers import SentenceTransformer
import faiss
from collections import Counter

MODEL_NAME = "sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2"

@st.cache_data
def load_data():
    df = pd.read_csv("movies_list.csv")
    df['genre_list1'] = df['genre'].fillna('').apply(lambda x: [g.strip() for g in x.split(',') if g.strip()])
    df['director_list'] = df['director'].fillna('').apply(lambda x: [d.strip() for d in x.split(',') if d.strip() and d.strip() != '...'])
    return df

@st.cache_resource
def load_model_and_vectors():
    model = SentenceTransformer(MODEL_NAME)
    vectors = np.load("movie_vectors.npy")
    vectors = vectors / np.linalg.norm(vectors, axis=1, keepdims=True)
    return model, vectors

st.set_page_config(page_title="üé¨ –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é", layout="wide")

df = load_data()
model, vectors = load_model_and_vectors()

st.title("üé¨ –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —Ñ–∏–ª—å–º–æ–≤ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é")

# –§–∏–ª—å—Ç—Ä—ã
years = st.slider("üìÖ –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞", int(df['year'].min()), int(df['year'].max()), (1990, 2023))
time_min = st.number_input("‚è± –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω)", min_value=0, max_value=500, value=0)
time_max = st.number_input("‚è± –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω)", min_value=0, max_value=500, value=300)
genre_options = sorted({g for genres in df['genre_list1'] for g in genres})
genres = st.multiselect("üé≠ –ñ–∞–Ω—Ä—ã", genre_options)
all_directors = [d for sublist in df['director_list'] for d in sublist]
director_counts = Counter(all_directors)
director_options = [d for d, _ in director_counts.most_common()]
directors = st.multiselect("üé¨ –†–µ–∂–∏—Å—Å—ë—Ä—ã", director_options)
top_k = st.slider("üìΩ –ö–æ–ª-–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π", 1, 20, 10)

# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
filtered_df = df[
    (df['year'] >= years[0]) & (df['year'] <= years[1]) &
    (df['time_minutes'] >= time_min) & (df['time_minutes'] <= time_max)
]
if genres:
    filtered_df = filtered_df[filtered_df['genre_list1'].apply(lambda lst: any(g in lst for g in genres))]
if directors:
    filtered_df = filtered_df[filtered_df['director_list'].apply(lambda lst: any(d in lst for d in directors))]

st.info(f"üéû –ù–∞–π–¥–µ–Ω–æ —Ñ–∏–ª—å–º–æ–≤ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: **{len(filtered_df)}**")
if len(filtered_df) == 0:
    st.warning("‚ùå –ù–µ—Ç —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.")
    st.stop()

# –ü–æ–∏—Å–∫ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
query = st.text_input("üîé –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞", key="query_input")

if st.button("üîç –ù–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ —Ñ–∏–ª—å–º—ã"):
    if not query.strip():
        st.warning("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞.")
    else:
        with st.spinner("üîç –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ —Ñ–∏–ª—å–º—ã..."):
            filtered_indices = filtered_df.index.to_list()
            filtered_vectors = vectors[filtered_indices]
            filtered_vectors = filtered_vectors.astype('float32')

            index = faiss.IndexFlatIP(filtered_vectors.shape[1])
            index.add(filtered_vectors)

            query_vec = model.encode([query]).astype('float32')
            query_vec /= np.linalg.norm(query_vec, axis=1, keepdims=True)

            D, I = index.search(query_vec, top_k)
            results = filtered_df.iloc[I[0]]

            st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: {len(results)}")

            cols = st.columns(2)
            for i, (_, row) in enumerate(results.iterrows()):
                with cols[i % 2]:
                    st.markdown(f"""
                    <div style="border:1px solid #e0e0e0; border-radius:16px; padding:16px; margin-bottom:24px; background:#f9f9f9;">
                        {f"<img src='{row['image_url']}' style='width:100%; height:350px; object-fit:cover; border-radius:12px;'/>" if 'image_url' in row and pd.notna(row['image_url']) else ''}
                        <h3>üé¨ {row['movie_title']}</h3>
                        <p><b>üìù –û–ø–∏—Å–∞–Ω–∏–µ:</b> {row.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}</p>
                        <p><b>üé≠ –ñ–∞–Ω—Ä—ã:</b> {', '.join(row.get('genre_list1', [])) or '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}</p>
                        <p><b>üé¨ –†–µ–∂–∏—Å—Å—ë—Ä:</b> {', '.join(row.get('director_list', [])) or '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
                        <p><b>üìÖ –ì–æ–¥:</b> {row.get('year', '?')}</p>
                        <p><b>‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {row.get('time_minutes', '?')} –º–∏–Ω</p>
                    </div>
                    """, unsafe_allow_html=True)
