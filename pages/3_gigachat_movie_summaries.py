import streamlit as st
import pandas as pd
import numpy as np
from sentence_transformers import SentenceTransformer
import faiss

# === –í–ê–ñ–ù–û: –£–ö–ê–ó–´–í–ê–ï–ú –ö–õ–Æ–ß –ü–†–Ø–ú–û –ó–î–ï–°–¨ ===
GROQ_API_KEY = "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"

# –î–ª—è Groq Cloud
from langchain_groq import ChatGroq
from langchain_core.messages import HumanMessage, SystemMessage
from langchain.prompts import ChatPromptTemplate
from langchain.schema.runnable import RunnablePassthrough
from langchain.schema.output_parser import StrOutputParser

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏ ===
MODEL_NAME = "sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2"
GROQ_MODEL = "mixtral-8x7b-32768"  # –∏–ª–∏ "llama3-70b-8192"

# === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
@st.cache_data
def load_data():
    df = pd.read_csv("movies_list.csv")
    return df

# === –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –∏–Ω–¥–µ–∫—Å–∞ ===
@st.cache_resource
def load_model_and_index():
    model = SentenceTransformer(MODEL_NAME)
    vectors = np.load("movie_vectors.npy")
    index = faiss.read_index("index.bin")
    return model, index, vectors

# === –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ ===
def find_similar_movies(query, model, index, df, top_k=5):
    query_vec = model.encode([query]).astype('float32')
    D, I = index.search(query_vec, top_k)
    return df.iloc[I[0]]

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Groq Cloud ===
def get_groq_llm(api_key=GROQ_API_KEY):
    return ChatGroq(
        model=GROQ_MODEL,
        temperature=0.7,
        max_tokens=1000,
        timeout=None,
        api_key=api_key
    )

# === –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è LLM ===
def format_docs(docs):
    formatted = []
    for i, row in docs.iterrows():
        info = f"""
{i+1}. **{row['movie_title']}** ({row.get('year', '?')})
   –ñ–∞–Ω—Ä: {row.get('genre', '–ù–µ —É–∫–∞–∑–∞–Ω')}
   –û–ø–∏—Å–∞–Ω–∏–µ: {row.get('description', '')[:200]}...
"""
        formatted.append(info)
    return "\n".join(formatted)

# === RAG —Ü–µ–ø–æ—á–∫–∞ —Å Groq Cloud ===
def create_rag_chain(model, index, df):
    llm = get_groq_llm()

    prompt = ChatPromptTemplate.from_messages([
        ("system", """–¢—ã –∫–∏–Ω–æ–∫—Ä–∏—Ç–∏–∫ —Å —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞: 
- –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–ª—å–º—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
- –î–∞—Ç—å —à—É—Ç–ª–∏–≤—ã–µ, –Ω–æ —Ç–æ—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- –û–±—ä—è—Å–Ω–∏—Ç—å, –ø–æ—á–µ–º—É –æ–Ω–∏ –ø–æ–¥—Ö–æ–¥—è—Ç –ø–æ–¥ –∑–∞–ø—Ä–æ—Å
- –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ–º—ã –∏–ª–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ —Ñ–∏–ª—å–º–∞–º–∏

–ï—Å–ª–∏ —Ñ–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã ‚Äî —Ç–æ–∂–µ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º, –Ω–æ —Å —é–º–æ—Ä–æ–º üòä"""),
        ("human", """
üîç –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "{question}"
üé¨ –í–æ—Ç —Ñ–∏–ª—å–º—ã, –∫–æ—Ç–æ—Ä—ã–µ —è –Ω–∞—à—ë–ª:

{context}

üí¨ –û—Ç–≤–µ—Ç:""")
    ])

    def retrieve_and_format(query):
        results = find_similar_movies(query, model, index, df, top_k=5)
        if len(results) == 0:
            return {"context": "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å...", "question": query}
        return {"context": format_docs(results), "question": query}

    rag_chain = (
        RunnablePassthrough(input=lambda x: x["query"])
        | retrieve_and_format
        | prompt
        | llm
        | StrOutputParser()
    )
    return rag_chain

# === Streamlit UI ===
st.set_page_config(page_title="üé¨ –£–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", layout="wide")
st.title("ü§ñ –£–º–Ω—ã–π –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ —á–µ—Ä–µ–∑ Groq Cloud")

df = load_data()
model, full_index, vectors = load_model_and_index()

rag_chain = create_rag_chain(model, full_index, df)

# === –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
user_query = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–§–∏–ª—å–º –ø—Ä–æ –ª—é–±–æ–≤—å –≤ —Å—Ç–∏–ª–µ –∞–Ω–∏–º–µ'")
if st.button("üîç –ù–∞–π—Ç–∏ –∏ —Å–ø—Ä–æ—Å–∏—Ç—å –ò–ò"):
    if not user_query.strip():
        st.warning("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å!")
    else:
        with st.spinner("üß† –î—É–º–∞—é –Ω–∞–¥ —ç—Ç–∏–º..."):
            try:
                answer = rag_chain.invoke({"query": user_query})
                st.markdown("### üí¨ –û—Ç–≤–µ—Ç –æ—Ç –ò–ò:")
                st.markdown(answer)
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")