import streamlit as st
import pandas as pd
import numpy as np
from sentence_transformers import SentenceTransformer
import faiss
from langchain_groq import ChatGroq
from langchain_core.messages import SystemMessage, HumanMessage

GROQ_API_KEY = "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"

MODEL_NAME = "sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2"
GROQ_MODEL = "deepseek-r1-distill-llama-70b"

@st.cache_data
def load_data():
    return pd.read_csv("movies_list.csv")

@st.cache_resource
def load_model_and_index():
    model = SentenceTransformer(MODEL_NAME)
    vectors = np.load("movie_vectors.npy")
    index = faiss.read_index("index.bin")
    return model, index, vectors

def find_similar_movies(query, model, index, df, top_k=5):
    query_vec = model.encode([query]).astype('float32')
    D, I = index.search(query_vec, top_k)
    return df.iloc[I[0]]

def format_movies_for_prompt(docs):
    lines = []
    for i, row in docs.iterrows():
        lines.append(f"{i+1}. {row['movie_title']} ({row.get('year', '?')}) ‚Äî –∂–∞–Ω—Ä: {row.get('genre', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n–û–ø–∏—Å–∞–Ω–∏–µ: {row.get('description', '')[:200]}...")
    return "\n".join(lines)

def get_groq_llm():
    return ChatGroq(
        model=GROQ_MODEL,
        temperature=0.7,
        max_tokens=1500,
        api_key=GROQ_API_KEY
    )

st.title("üé¨ –£–º–Ω—ã–π –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")

df = load_data()
model, index, vectors = load_model_and_index()

user_query = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–Ω–æ–≤–æ–≥–æ–¥–Ω—è—è –Ω–æ—á—å'")

if st.button("–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"):
    if not user_query.strip():
        st.warning("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å!")
    else:
        with st.spinner("–ì–æ—Ç–æ–≤–ª—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏..."):
            try:
                llm = get_groq_llm()
                
                # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ñ–∏–ª—å–º—ã –∏–∑ –±–∞–∑—ã
                similar_movies = find_similar_movies(user_query, model, index, df, top_k=5)
                if similar_movies.empty:
                    movies_text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏—á–µ–≥–æ –ø–æ—Ö–æ–∂–µ–≥–æ –≤ –±–∞–∑–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
                else:
                    movies_text = format_movies_for_prompt(similar_movies)
                
                # –ü—Ä–æ—Å–∏–º LLM –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã –∏ –¥–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                system_msg = SystemMessage(content=(
                    "–¢—ã –∫–∏–Ω–æ–∫—Ä–∏—Ç–∏–∫ —Å —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞. –î–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π, –æ—Å—Ç—Ä–æ—É–º–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–∑—ã–≤ –ø–æ —Å–ø–∏—Å–∫—É —Ñ–∏–ª—å–º–æ–≤ –∏ –¥–æ–±–∞–≤—å —Å–≤–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É."
                ))
                human_msg = HumanMessage(content=f"–ó–∞–ø—Ä–æ—Å: {user_query}\n\n–§–∏–ª—å–º—ã:\n{movies_text}")

                answer = llm.invoke([system_msg, human_msg]).content
                
                # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–≥–∞ <think>
                clean_answer = answer.replace("<think>", "").replace("</think>", "").strip()

                # –í—ã–≤–æ–¥ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                st.markdown("## üí¨ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –º–Ω–µ–Ω–∏–µ:", unsafe_allow_html=True)
                st.markdown(
                    f"""
                    <div style='font-size: 18px; line-height: 1.6;'>
                        {clean_answer.replace("\n", "<br>")}
                    </div>
                    """,
                    unsafe_allow_html=True
                )

            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: {e}")
