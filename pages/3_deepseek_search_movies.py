import streamlit as st
import pandas as pd
import numpy as np
import re
from sentence_transformers import SentenceTransformer
import faiss
from langchain_groq import ChatGroq
from langchain_core.messages import SystemMessage, HumanMessage

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏ –∏ –∫–ª—é—á API
GROQ_MODEL = "deepseek-r1-distill-llama-70b"
GROQ_API_KEY = st.secrets["GROQ_API_KEY"]


# –ú–æ–¥–µ–ª—å –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
EMBEDDING_MODEL_NAME = "sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2"

@st.cache_data
def load_data():
    return pd.read_csv("movies_list.csv")

@st.cache_resource
def load_model_and_index():
    model = SentenceTransformer(EMBEDDING_MODEL_NAME)
    vectors = np.load("movie_vectors.npy")
    index = faiss.read_index("index.bin")
    return model, index, vectors

def find_similar_movies(query, model, index, df, top_k=5):
    query_vec = model.encode([query]).astype('float32')
    D, I = index.search(query_vec, top_k)
    return df.iloc[I[0]]

def format_movies_for_prompt(docs):
    lines = []
    for idx, row in docs.iterrows():
        year = row.get('year', '?')
        genre = row.get('genre', '–Ω–µ —É–∫–∞–∑–∞–Ω')
        desc = row.get('description', '')
        lines.append(f"{idx+1}. {row['movie_title']} ({year}) ‚Äî –∂–∞–Ω—Ä: {genre}\n–û–ø–∏—Å–∞–Ω–∏–µ: {desc[:200]}...")
    return "\n".join(lines)

def get_groq_llm():
    return ChatGroq(
        model=GROQ_MODEL,
        temperature=0.7,
        max_tokens=1800,
        api_key=GROQ_API_KEY
    )

def remove_think_blocks(text):
    return re.sub(r"<think>.*?</think>", "", text, flags=re.DOTALL).strip()

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.title("üé¨ –ö–∏–Ω–æ–∫—Ä–∏—Ç–∏–∫–∞ –Ω–∞ DeepSeek LLaMA 70B")

df = load_data()
model, index, vectors = load_model_and_index()

user_query = st.text_input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–Ω–æ–≤–æ–≥–æ–¥–Ω—è—è –Ω–æ—á—å'")

if st.button("–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"):
    if not user_query.strip():
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∑–∞–ø—Ä–æ—Å–∞!")
    else:
        with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏..."):
            try:
                llm = get_groq_llm()
                similar_movies = find_similar_movies(user_query, model, index, df, top_k=5)
                movies_text = format_movies_for_prompt(similar_movies) if not similar_movies.empty else "–ù–µ—Ç —Ñ–∏–ª—å–º–æ–≤, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥ –∑–∞–ø—Ä–æ—Å."

                system_msg = SystemMessage(content="""
–¢—ã ‚Äî –∫–∏–Ω–æ–∫—Ä–∏—Ç–∏–∫, –ø–∏—à—É—â–∏–π –ª–∞–∫–æ–Ω–∏—á–Ω—ã–µ –∏ –æ—Å—Ç—Ä–æ—É–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

‚ùå –ó–∞–ø—Ä–µ—â–µ–Ω–æ:
- —Ä–∞—Å—Å—É–∂–¥–∞—Ç—å –º–Ω–æ–≥–æ;
- –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫;
- –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã;
- –ø–∏—Å–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.

‚úÖ –ù—É–∂–Ω–æ:
- —Å–¥–µ–ª–∞–π –Ω–µ–±–æ–ª—å—à–æ–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ —Ñ–∏–ª—å–º–∞—Ö –∏ —Ç–µ–º–µ;
- –ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤—ã –Ω–∞ —Ñ–∏–ª—å–º—ã –∏–∑ —Å–ø–∏—Å–∫–∞, –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
                                           

### üé¨ –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ (–≥–æ–¥)
**–ñ–∞–Ω—Ä:** –∂–∞–Ω—Ä  
–û–ø–∏—Å–∞–Ω–∏–µ: –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ...  
–ú–Ω–µ–Ω–∏–µ: –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç —Å–µ–±—è —à—É—Ç–æ–∫ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–π –∏ –æ–±—ä—è—Å–Ω–∏ –ø–æ—á–µ–º—É —ç—Ç–æ—Ç —Ñ–∏–ª—å–º

- –≤ –∫–æ–Ω—Ü–µ –¥–∞—Ç—å —Ä–∞–∑–¥–µ–ª:

## üéÅ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

–ü—Ä–µ–¥–ª–æ–∂–∏ **–Ω–æ–≤—ã–µ —Ñ–∏–ª—å–º—ã**, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –ø–æ —Ç–µ–º–µ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç —Å–µ–±—è.
–≤ –∫–æ–Ω—Ü–µ —Å–¥–µ–ª–∞–π –≤—ã–≤–æ–¥ –∏ –ø–æ–∂–µ–ª–∞–π —Ö–æ—Ä–æ—à–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
""")

                human_msg = HumanMessage(content=f"–¢–µ–º–∞: {user_query}\n\n–§–∏–ª—å–º—ã:\n{movies_text}")

                response_raw = llm.invoke([system_msg, human_msg]).content
                response_clean = remove_think_blocks(response_raw)

                st.subheader("üí¨ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
                st.markdown(response_clean)

            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")


